"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXataClient = exports.XataClient = void 0;
// Generated by Xata Codegen 0.26.9. Please do not edit.
const client_1 = require("@xata.io/client");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "password", type: "string", notNull: true, defaultValue: "" },
      { name: "username", type: "string", unique: true },
    ],
    revLinks: [
      { column: "user", table: "documents" },
      { column: "user", table: "privileges" },
    ],
  },
  {
    name: "documents",
    columns: [
      { name: "user", type: "link", link: { table: "users" } },
      { name: "documentPrivacy", type: "bool", defaultValue: "true" },
      { name: "fileType", type: "string", defaultValue: "txt" },
      { name: "title", type: "string", defaultValue: "Untitled Document" },
    ],
    revLinks: [{ column: "document", table: "privileges" }],
  },
  {
    name: "privileges",
    columns: [
      { name: "document", type: "link", link: { table: "documents" } },
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "privilege_edit",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
      {
        name: "privilege_delete",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
      {
        name: "privilege_view",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
    ],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = (0, client_1.buildClient)();
const defaultOptions = {
  databaseURL: process.env.DATABASE_URL,
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
exports.XataClient = XataClient;
let instance = undefined;
/** @type { () => XataClient } */
const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
exports.getXataClient = getXataClient;
